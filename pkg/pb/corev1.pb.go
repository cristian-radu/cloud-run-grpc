// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: google/cloud/run/v1/corev1.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED
	// This field should not be used directly as it is meant to be inlined directly into the message.
	// Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference,proto3" json:"local_object_reference,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the ConfigMap must be defined
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The ConfigMap to select from.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConfigMapEnvSource) Reset() {
	*x = ConfigMapEnvSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapEnvSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapEnvSource) ProtoMessage() {}

func (x *ConfigMapEnvSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapEnvSource.ProtoReflect.Descriptor instead.
func (*ConfigMapEnvSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigMapEnvSource) GetLocalObjectReference() *LocalObjectReference {
	if x != nil {
		return x.LocalObjectReference
	}
	return nil
}

func (x *ConfigMapEnvSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ConfigMapEnvSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Selects a key from a ConfigMap.
type ConfigMapKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED
	// This field should not be used directly as it is meant to be inlined directly into the message.
	// Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference,proto3" json:"local_object_reference,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The key to select.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the ConfigMap or its key must be defined
	Optional bool `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The ConfigMap to select from.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConfigMapKeySelector) Reset() {
	*x = ConfigMapKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapKeySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapKeySelector) ProtoMessage() {}

func (x *ConfigMapKeySelector) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapKeySelector.ProtoReflect.Descriptor instead.
func (*ConfigMapKeySelector) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigMapKeySelector) GetLocalObjectReference() *LocalObjectReference {
	if x != nil {
		return x.LocalObjectReference
	}
	return nil
}

func (x *ConfigMapKeySelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigMapKeySelector) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *ConfigMapKeySelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented
// in a volume as files using the keys in the Data field as the file names, unless the items element
// is populated with specific mappings of keys to paths.
type ConfigMapVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Name of the config.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value.
	// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Mode bits to use on created files by default. Must be a value between 0 and 0777.
	// Defaults to 0644. Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file mode, like fsGroup,
	// and the result can be other mode bits set.
	DefaultMode int32 `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the Secret or its keys must be defined.
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *ConfigMapVolumeSource) Reset() {
	*x = ConfigMapVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapVolumeSource) ProtoMessage() {}

func (x *ConfigMapVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapVolumeSource.ProtoReflect.Descriptor instead.
func (*ConfigMapVolumeSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigMapVolumeSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapVolumeSource) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ConfigMapVolumeSource) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *ConfigMapVolumeSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// A single application container. This specifies both the container to run, the command to run in the
// container and the arguments to supply to it. Note that additional arguments may be supplied by the
// system to the container at runtime.
type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud Run fully managed: only supports containers from Google Container Registry
	// Cloud Run for Anthos: supported
	// URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
	Image   string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Command []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
	// Variable references $(VAR_NAME) are expanded using the container's environment.
	// If a variable cannot be resolved, the reference in the input string will be unchanged.
	// The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).
	// Escaped references will never be expanded, regardless of whether the variable exists or not.
	// More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// List of environment variables to set in the container.
	Env []*EnvVar `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Respurces *ResourceRequirements `protobuf:"bytes,6,opt,name=respurces,proto3" json:"respurces,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Container's working directory. If not specified, the container runtime's default will be used,
	// which might be configured in the container image.
	WorkingDir string `protobuf:"bytes,7,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// List of ports to expose from the container. Only a single port can be specified.
	// The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable
	// for the container to listen on.
	Ports []*ContainerPort `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// List of sources to populate environment variables in the container.
	// The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event
	// when the container is starting. When a key exists in multiple sources, the value associated with the
	// last source will take precedence. Values defined by an Env with a duplicate key will take precedence.
	// Cannot be updated.
	EnvFrom []*EnvFromSource `protobuf:"bytes,9,rep,name=env_from,json=envFrom,proto3" json:"env_from,omitempty"`
	// Cloud Run fully managed: supported
	// Volume to mount into the container's filesystem. Only supports SecretVolumeSources.
	// Cloud Run for Anthos: supported
	// Pod volumes to mount into the container's filesystem.
	VolumeMounts []*VolumeMount `protobuf:"bytes,10,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Periodic probe of container liveness. Container will be restarted if the probe fails.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *Probe `protobuf:"bytes,11,opt,name=liveness_probe,json=livenessProbe,proto3" json:"liveness_probe,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Periodic probe of container service readiness. Container will be removed from service endpoints
	// if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *Probe `protobuf:"bytes,12,opt,name=readiness_probe,json=readinessProbe,proto3" json:"readiness_probe,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: not supported
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided,
	// until it succeeds. Container will not be added to service endpoints if the probe fails.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *Probe `protobuf:"bytes,13,opt,name=startup_probe,json=startupProbe,proto3" json:"startup_probe,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Path at which the file to which the container's termination message will be written is mounted into the
	// container's filesystem. Message written is intended to be brief final status, such as an assertion failure message.
	// Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be
	// limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath string `protobuf:"bytes,14,opt,name=termination_message_path,json=terminationMessagePath,proto3" json:"termination_message_path,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination message
	// file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines,
	// whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy string `protobuf:"bytes,15,opt,name=termination_message_policy,json=terminationMessagePolicy,proto3" json:"termination_message_policy,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified,
	// or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy string `protobuf:"bytes,16,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Security options the pod should run with.
	// More info: https://kubernetes.io/docs/concepts/policy/security-context/
	// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *SecurityContext `protobuf:"bytes,17,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{3}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Container) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Container) GetEnv() []*EnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Container) GetRespurces() *ResourceRequirements {
	if x != nil {
		return x.Respurces
	}
	return nil
}

func (x *Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Container) GetPorts() []*ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetEnvFrom() []*EnvFromSource {
	if x != nil {
		return x.EnvFrom
	}
	return nil
}

func (x *Container) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *Container) GetLivenessProbe() *Probe {
	if x != nil {
		return x.LivenessProbe
	}
	return nil
}

func (x *Container) GetReadinessProbe() *Probe {
	if x != nil {
		return x.ReadinessProbe
	}
	return nil
}

func (x *Container) GetStartupProbe() *Probe {
	if x != nil {
		return x.StartupProbe
	}
	return nil
}

func (x *Container) GetTerminationMessagePath() string {
	if x != nil {
		return x.TerminationMessagePath
	}
	return ""
}

func (x *Container) GetTerminationMessagePolicy() string {
	if x != nil {
		return x.TerminationMessagePolicy
	}
	return ""
}

func (x *Container) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *Container) GetSecurityContext() *SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

// ContainerPort represents a network port in a single container.
type ContainerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port number the container listens on. This must be a valid port number, 0 < x < 65536.
	ContainerPort int32 `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *ContainerPort) Reset() {
	*x = ContainerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPort) ProtoMessage() {}

func (x *ContainerPort) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPort.ProtoReflect.Descriptor instead.
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{4}
}

func (x *ContainerPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *ContainerPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `protobuf:"bytes,2,opt,name=config_map_ref,json=configMapRef,proto3" json:"config_map_ref,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The Secret to select from
	SecretRef *SecretEnvSource `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3" json:"secret_ref,omitempty"`
}

func (x *EnvFromSource) Reset() {
	*x = EnvFromSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvFromSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvFromSource) ProtoMessage() {}

func (x *EnvFromSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvFromSource.ProtoReflect.Descriptor instead.
func (*EnvFromSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{5}
}

func (x *EnvFromSource) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *EnvFromSource) GetConfigMapRef() *ConfigMapEnvSource {
	if x != nil {
		return x.ConfigMapRef
	}
	return nil
}

func (x *EnvFromSource) GetSecretRef() *SecretEnvSource {
	if x != nil {
		return x.SecretRef
	}
	return nil
}

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container
	// and any route environment variables. If a variable cannot be resolved, the reference in the input string will
	// be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).
	// Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Cloud Run fully managed: supported
	// Source for the environment variable's value. Only supports secret_key_ref.
	// Cloud Run for Anthos: supported
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `protobuf:"bytes,3,opt,name=value_from,json=valueFrom,proto3" json:"value_from,omitempty"`
}

func (x *EnvVar) Reset() {
	*x = EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVar) ProtoMessage() {}

func (x *EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVar.ProtoReflect.Descriptor instead.
func (*EnvVar) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{6}
}

func (x *EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EnvVar) GetValueFrom() *EnvVarSource {
	if x != nil {
		return x.ValueFrom
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelector `protobuf:"bytes,1,opt,name=config_map_key_ref,json=configMapKeyRef,proto3" json:"config_map_key_ref,omitempty"`
	// Cloud Run fully managed: supported.
	// Selects a key (version) of a secret in Secret Manager.
	// Cloud Run for Anthos: supported.
	// Selects a key of a secret in the pod's namespace.
	SecretKeyRef *SecretKeySelector `protobuf:"bytes,2,opt,name=secret_key_ref,json=secretKeyRef,proto3" json:"secret_key_ref,omitempty"`
}

func (x *EnvVarSource) Reset() {
	*x = EnvVarSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarSource) ProtoMessage() {}

func (x *EnvVarSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarSource.ProtoReflect.Descriptor instead.
func (*EnvVarSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{7}
}

func (x *EnvVarSource) GetConfigMapKeyRef() *ConfigMapKeySelector {
	if x != nil {
		return x.ConfigMapKeyRef
	}
	return nil
}

func (x *EnvVarSource) GetSecretKeyRef() *SecretKeySelector {
	if x != nil {
		return x.SecretKeyRef
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// ExecAction describes a "run in container" action.
type ExecAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Command is the command line to execute inside the container, the working directory for the command
	// is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell,
	// so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out
	// to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *ExecAction) Reset() {
	*x = ExecAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecAction) ProtoMessage() {}

func (x *ExecAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecAction.ProtoReflect.Descriptor instead.
func (*ExecAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{8}
}

func (x *ExecAction) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Path to access on the HTTP server.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme string `protobuf:"bytes,3,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []*HTTPHeader `protobuf:"bytes,4,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`
}

func (x *HTTPGetAction) Reset() {
	*x = HTTPGetAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGetAction) ProtoMessage() {}

func (x *HTTPGetAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGetAction.ProtoReflect.Descriptor instead.
func (*HTTPGetAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{9}
}

func (x *HTTPGetAction) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPGetAction) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPGetAction) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *HTTPGetAction) GetHttpHeaders() []*HTTPHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The header field name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The header field value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{10}
}

func (x *HTTPHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Cloud Run fully managed: supported
// Cloud Run for Anthos: supported
// Maps a string key to a path within a volume.
type KeyToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: supported
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// Cloud Run for Anthos: supported
	// The key to project.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// The relative path of the file to map the key to. May not be an absolute path.
	// May not contain the path element '..'. May not start with the string '..'.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Mode bits to use on this file, must be a value between 0000 and 0777.
	// If not specified, the volume defaultMode will be used. This might be in conflict with other options
	// that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *KeyToPath) Reset() {
	*x = KeyToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyToPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyToPath) ProtoMessage() {}

func (x *KeyToPath) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyToPath.ProtoReflect.Descriptor instead.
func (*KeyToPath) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{11}
}

func (x *KeyToPath) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyToPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KeyToPath) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LocalObjectReference) Reset() {
	*x = LocalObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalObjectReference) ProtoMessage() {}

func (x *LocalObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalObjectReference.ProtoReflect.Descriptor instead.
func (*LocalObjectReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{12}
}

func (x *LocalObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds int32 `protobuf:"varint,1,opt,name=initial_delay_seconds,json=initialDelaySeconds,proto3" json:"initial_delay_seconds,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds int32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int32 `protobuf:"varint,3,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int32 `protobuf:"varint,4,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold int32 `protobuf:"varint,5,opt,name=failure_threshold,json=failureThreshold,proto3" json:"failure_threshold,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// One and only one of the following should be specified. Exec specifies the action to take.
	// A field inlined from the Handler message.
	Exec *ExecAction `protobuf:"bytes,6,opt,name=exec,proto3" json:"exec,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// HTTPGet specifies the http request to perform.
	// A field inlined from the Handler message.
	HttpGet *HTTPGetAction `protobuf:"bytes,7,opt,name=http_get,json=httpGet,proto3" json:"http_get,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
	// A field inlined from the Handler message.
	TcpSocket *TCPSocketAction `protobuf:"bytes,8,opt,name=tcp_socket,json=tcpSocket,proto3" json:"tcp_socket,omitempty"`
}

func (x *Probe) Reset() {
	*x = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{13}
}

func (x *Probe) GetInitialDelaySeconds() int32 {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return 0
}

func (x *Probe) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *Probe) GetPeriodSeconds() int32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *Probe) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *Probe) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *Probe) GetExec() *ExecAction {
	if x != nil {
		return x.Exec
	}
	return nil
}

func (x *Probe) GetHttpGet() *HTTPGetAction {
	if x != nil {
		return x.HttpGet
	}
	return nil
}

func (x *Probe) GetTcpSocket() *TCPSocketAction {
	if x != nil {
		return x.TcpSocket
	}
	return nil
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: Only memory and CPU are supported.
	// Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory.
	// Cloud Run for Anthos: supported
	// Limits describes the maximum amount of compute resources allowed. The values of the map is string form
	// of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Cloud Run fully managed: Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'.
	// Cloud Run for Anthos: supported
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to
	// Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type:
	// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Requests map[string]string `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{14}
}

func (x *ResourceRequirements) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ResourceRequirements) GetRequests() map[string]string {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// SecretEnvSource selects a Secret to populate the environment variables with.
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference,proto3" json:"local_object_reference,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the Secret must be defined
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The Secret to select from.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SecretEnvSource) Reset() {
	*x = SecretEnvSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretEnvSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretEnvSource) ProtoMessage() {}

func (x *SecretEnvSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretEnvSource.ProtoReflect.Descriptor instead.
func (*SecretEnvSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{15}
}

func (x *SecretEnvSource) GetLocalObjectReference() *LocalObjectReference {
	if x != nil {
		return x.LocalObjectReference
	}
	return nil
}

func (x *SecretEnvSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *SecretEnvSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Cloud Run fully managed: supported
// Cloud Run for Anthos: supported
// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference,proto3" json:"local_object_reference,omitempty"`
	// Cloud Run fully managed: supported
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version.
	// Cloud Run for Anthos: supported
	// The key of the secret to select from. Must be a valid secret key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the Secret or its key must be defined
	Optional bool `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty"`
	// Cloud Run fully managed: supported
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
	// If the secret is in another project, you must define an alias.
	// An alias definition has the form: :projects/<project-id|project-number>/secrets/.
	// If multiple alias definitions are needed, they must be separated by commas.
	// The alias definitions must be set on the run.googleapis.com/secrets annotation.
	// Cloud Run for Anthos: supported
	// The name of the secret in the pod's namespace to select from.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SecretKeySelector) Reset() {
	*x = SecretKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeySelector) ProtoMessage() {}

func (x *SecretKeySelector) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeySelector.ProtoReflect.Descriptor instead.
func (*SecretKeySelector) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{16}
}

func (x *SecretKeySelector) GetLocalObjectReference() *LocalObjectReference {
	if x != nil {
		return x.LocalObjectReference
	}
	return nil
}

func (x *SecretKeySelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SecretKeySelector) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *SecretKeySelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Cloud Run fully managed: supported
// The secret's value will be presented as the content of a file whose name is defined in the item path.
// If no items are defined, the name of the file is the secret_name.
// Cloud Run for Anthos: supported
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the
// Data field as the file names.
type SecretVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: supported
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
	// If the secret is in another project, you must define an alias.
	// An alias definition has the form: :projects/<project-id|project-number>/secrets/.
	// If multiple alias definitions are needed, they must be separated by commas.
	// The alias definitions must be set on the run.googleapis.com/secrets annotation.
	// Cloud Run for Anthos: supported
	// Name of the secret in the container's namespace to use.
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// Cloud Run fully managed: supported
	// If unspecified, the volume will expose a file whose name is the secret_name.
	// If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be
	// the name of the file exposed in the volume. When items are defined, they must specify a key and a path.
	// Cloud Run for Anthos: supported
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value.
	// If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Mode bits to use on created files by default. Must be a value between 0000 and 0777.
	// Defaults to 0644. Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file mode, like fsGroup,
	// and the result can be other mode bits set.
	// NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly
	// as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
	DefaultMode int32 `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Specify whether the Secret or its keys must be defined.
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *SecretVolumeSource) Reset() {
	*x = SecretVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVolumeSource) ProtoMessage() {}

func (x *SecretVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVolumeSource.ProtoReflect.Descriptor instead.
func (*SecretVolumeSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{17}
}

func (x *SecretVolumeSource) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretVolumeSource) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SecretVolumeSource) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *SecretVolumeSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// SecurityContext holds security configuration that will be applied to a container.
// Some fields are present in both SecurityContext and PodSecurityContext.
// When both are set, the values in SecurityContext take precedence.
type SecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext,
	// the value specified in SecurityContext takes precedence.
	RunAsUser int32 `protobuf:"varint,1,opt,name=run_as_user,json=runAsUser,proto3" json:"run_as_user,omitempty"`
}

func (x *SecurityContext) Reset() {
	*x = SecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityContext) ProtoMessage() {}

func (x *SecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityContext.ProtoReflect.Descriptor instead.
func (*SecurityContext) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{18}
}

func (x *SecurityContext) GetRunAsUser() int32 {
	if x != nil {
		return x.RunAsUser
	}
	return 0
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// TCPSocketAction describes an action based on opening a socket
type TCPSocketAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	// This field is currently limited to integer types only because of proto's inability to properly
	// support the IntOrString golang type.
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Optional: Host name to connect to, defaults to the pod IP.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *TCPSocketAction) Reset() {
	*x = TCPSocketAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPSocketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPSocketAction) ProtoMessage() {}

func (x *TCPSocketAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPSocketAction.ProtoReflect.Descriptor instead.
func (*TCPSocketAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{19}
}

func (x *TCPSocketAction) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TCPSocketAction) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Volume represents a named volume in a container.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// Volume's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	Secret *SecretVolumeSource `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	ConfigMap *ConfigMapVolumeSource `protobuf:"bytes,3,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{20}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetSecret() *SecretVolumeSource {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Volume) GetConfigMap() *ConfigMapVolumeSource {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// This must match the Name of a Volume.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// Only true is accepted. Defaults to true.
	ReadOnly bool `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Cloud Run fully managed: supported
	// Cloud Run for Anthos: supported
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run for Anthos: supported
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath string `protobuf:"bytes,4,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_corev1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_corev1_proto_rawDescGZIP(), []int{21}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeMount) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

var File_google_cloud_run_v1_corev1_proto protoreflect.FileDescriptor

var file_google_cloud_run_v1_corev1_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72,
	0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f,
	0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xfa,
	0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x38, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x76, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x45, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x66, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x76, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4d, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x66, 0x12, 0x43, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x76,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x22, 0x74, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66,
	0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x22, 0x26,
	0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x0a,
	0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x33, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x65, 0x78, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x67, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x47, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x43,
	0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74,
	0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x53, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0f, 0x54,
	0x43, 0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x22, 0x78, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x76,
	0x31, 0x3b, 0x72, 0x75, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_run_v1_corev1_proto_rawDescOnce sync.Once
	file_google_cloud_run_v1_corev1_proto_rawDescData = file_google_cloud_run_v1_corev1_proto_rawDesc
)

func file_google_cloud_run_v1_corev1_proto_rawDescGZIP() []byte {
	file_google_cloud_run_v1_corev1_proto_rawDescOnce.Do(func() {
		file_google_cloud_run_v1_corev1_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_run_v1_corev1_proto_rawDescData)
	})
	return file_google_cloud_run_v1_corev1_proto_rawDescData
}

var file_google_cloud_run_v1_corev1_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_google_cloud_run_v1_corev1_proto_goTypes = []interface{}{
	(*ConfigMapEnvSource)(nil),    // 0: google.cloud.run.v1.ConfigMapEnvSource
	(*ConfigMapKeySelector)(nil),  // 1: google.cloud.run.v1.ConfigMapKeySelector
	(*ConfigMapVolumeSource)(nil), // 2: google.cloud.run.v1.ConfigMapVolumeSource
	(*Container)(nil),             // 3: google.cloud.run.v1.Container
	(*ContainerPort)(nil),         // 4: google.cloud.run.v1.ContainerPort
	(*EnvFromSource)(nil),         // 5: google.cloud.run.v1.EnvFromSource
	(*EnvVar)(nil),                // 6: google.cloud.run.v1.EnvVar
	(*EnvVarSource)(nil),          // 7: google.cloud.run.v1.EnvVarSource
	(*ExecAction)(nil),            // 8: google.cloud.run.v1.ExecAction
	(*HTTPGetAction)(nil),         // 9: google.cloud.run.v1.HTTPGetAction
	(*HTTPHeader)(nil),            // 10: google.cloud.run.v1.HTTPHeader
	(*KeyToPath)(nil),             // 11: google.cloud.run.v1.KeyToPath
	(*LocalObjectReference)(nil),  // 12: google.cloud.run.v1.LocalObjectReference
	(*Probe)(nil),                 // 13: google.cloud.run.v1.Probe
	(*ResourceRequirements)(nil),  // 14: google.cloud.run.v1.ResourceRequirements
	(*SecretEnvSource)(nil),       // 15: google.cloud.run.v1.SecretEnvSource
	(*SecretKeySelector)(nil),     // 16: google.cloud.run.v1.SecretKeySelector
	(*SecretVolumeSource)(nil),    // 17: google.cloud.run.v1.SecretVolumeSource
	(*SecurityContext)(nil),       // 18: google.cloud.run.v1.SecurityContext
	(*TCPSocketAction)(nil),       // 19: google.cloud.run.v1.TCPSocketAction
	(*Volume)(nil),                // 20: google.cloud.run.v1.Volume
	(*VolumeMount)(nil),           // 21: google.cloud.run.v1.VolumeMount
	nil,                           // 22: google.cloud.run.v1.ResourceRequirements.LimitsEntry
	nil,                           // 23: google.cloud.run.v1.ResourceRequirements.RequestsEntry
}
var file_google_cloud_run_v1_corev1_proto_depIdxs = []int32{
	12, // 0: google.cloud.run.v1.ConfigMapEnvSource.local_object_reference:type_name -> google.cloud.run.v1.LocalObjectReference
	12, // 1: google.cloud.run.v1.ConfigMapKeySelector.local_object_reference:type_name -> google.cloud.run.v1.LocalObjectReference
	11, // 2: google.cloud.run.v1.ConfigMapVolumeSource.items:type_name -> google.cloud.run.v1.KeyToPath
	6,  // 3: google.cloud.run.v1.Container.env:type_name -> google.cloud.run.v1.EnvVar
	14, // 4: google.cloud.run.v1.Container.respurces:type_name -> google.cloud.run.v1.ResourceRequirements
	4,  // 5: google.cloud.run.v1.Container.ports:type_name -> google.cloud.run.v1.ContainerPort
	5,  // 6: google.cloud.run.v1.Container.env_from:type_name -> google.cloud.run.v1.EnvFromSource
	21, // 7: google.cloud.run.v1.Container.volume_mounts:type_name -> google.cloud.run.v1.VolumeMount
	13, // 8: google.cloud.run.v1.Container.liveness_probe:type_name -> google.cloud.run.v1.Probe
	13, // 9: google.cloud.run.v1.Container.readiness_probe:type_name -> google.cloud.run.v1.Probe
	13, // 10: google.cloud.run.v1.Container.startup_probe:type_name -> google.cloud.run.v1.Probe
	18, // 11: google.cloud.run.v1.Container.security_context:type_name -> google.cloud.run.v1.SecurityContext
	0,  // 12: google.cloud.run.v1.EnvFromSource.config_map_ref:type_name -> google.cloud.run.v1.ConfigMapEnvSource
	15, // 13: google.cloud.run.v1.EnvFromSource.secret_ref:type_name -> google.cloud.run.v1.SecretEnvSource
	7,  // 14: google.cloud.run.v1.EnvVar.value_from:type_name -> google.cloud.run.v1.EnvVarSource
	1,  // 15: google.cloud.run.v1.EnvVarSource.config_map_key_ref:type_name -> google.cloud.run.v1.ConfigMapKeySelector
	16, // 16: google.cloud.run.v1.EnvVarSource.secret_key_ref:type_name -> google.cloud.run.v1.SecretKeySelector
	10, // 17: google.cloud.run.v1.HTTPGetAction.http_headers:type_name -> google.cloud.run.v1.HTTPHeader
	8,  // 18: google.cloud.run.v1.Probe.exec:type_name -> google.cloud.run.v1.ExecAction
	9,  // 19: google.cloud.run.v1.Probe.http_get:type_name -> google.cloud.run.v1.HTTPGetAction
	19, // 20: google.cloud.run.v1.Probe.tcp_socket:type_name -> google.cloud.run.v1.TCPSocketAction
	22, // 21: google.cloud.run.v1.ResourceRequirements.limits:type_name -> google.cloud.run.v1.ResourceRequirements.LimitsEntry
	23, // 22: google.cloud.run.v1.ResourceRequirements.requests:type_name -> google.cloud.run.v1.ResourceRequirements.RequestsEntry
	12, // 23: google.cloud.run.v1.SecretEnvSource.local_object_reference:type_name -> google.cloud.run.v1.LocalObjectReference
	12, // 24: google.cloud.run.v1.SecretKeySelector.local_object_reference:type_name -> google.cloud.run.v1.LocalObjectReference
	11, // 25: google.cloud.run.v1.SecretVolumeSource.items:type_name -> google.cloud.run.v1.KeyToPath
	17, // 26: google.cloud.run.v1.Volume.secret:type_name -> google.cloud.run.v1.SecretVolumeSource
	2,  // 27: google.cloud.run.v1.Volume.config_map:type_name -> google.cloud.run.v1.ConfigMapVolumeSource
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_google_cloud_run_v1_corev1_proto_init() }
func file_google_cloud_run_v1_corev1_proto_init() {
	if File_google_cloud_run_v1_corev1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_run_v1_corev1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapEnvSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvFromSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGetAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretEnvSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPSocketAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_corev1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_run_v1_corev1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_run_v1_corev1_proto_goTypes,
		DependencyIndexes: file_google_cloud_run_v1_corev1_proto_depIdxs,
		MessageInfos:      file_google_cloud_run_v1_corev1_proto_msgTypes,
	}.Build()
	File_google_cloud_run_v1_corev1_proto = out.File
	file_google_cloud_run_v1_corev1_proto_rawDesc = nil
	file_google_cloud_run_v1_corev1_proto_goTypes = nil
	file_google_cloud_run_v1_corev1_proto_depIdxs = nil
}
