// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: google/cloud/run/v1/domain_mappings.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The mode of the certificate.
type DomainMappingSpec_CertificateMode int32

const (
	DomainMappingSpec_CERTIFICATE_MODE_UNSPECIFIED DomainMappingSpec_CertificateMode = 0
	// Do not provision an HTTPS certificate.
	DomainMappingSpec_NONE DomainMappingSpec_CertificateMode = 1
	// Automatically provisions an HTTPS certificate via GoogleCA or LetsEncrypt.
	DomainMappingSpec_AUTOMATIC DomainMappingSpec_CertificateMode = 2
)

// Enum value maps for DomainMappingSpec_CertificateMode.
var (
	DomainMappingSpec_CertificateMode_name = map[int32]string{
		0: "CERTIFICATE_MODE_UNSPECIFIED",
		1: "NONE",
		2: "AUTOMATIC",
	}
	DomainMappingSpec_CertificateMode_value = map[string]int32{
		"CERTIFICATE_MODE_UNSPECIFIED": 0,
		"NONE":                         1,
		"AUTOMATIC":                    2,
	}
)

func (x DomainMappingSpec_CertificateMode) Enum() *DomainMappingSpec_CertificateMode {
	p := new(DomainMappingSpec_CertificateMode)
	*p = x
	return p
}

func (x DomainMappingSpec_CertificateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainMappingSpec_CertificateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_run_v1_domain_mappings_proto_enumTypes[0].Descriptor()
}

func (DomainMappingSpec_CertificateMode) Type() protoreflect.EnumType {
	return &file_google_cloud_run_v1_domain_mappings_proto_enumTypes[0]
}

func (x DomainMappingSpec_CertificateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainMappingSpec_CertificateMode.Descriptor instead.
func (DomainMappingSpec_CertificateMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{6, 0}
}

// Resource record type. Example: AAAA.
type ResourceRecord_RecordType int32

const (
	// An unknown resource record.
	ResourceRecord_RECORD_TYPE_UNSPECIFIED ResourceRecord_RecordType = 0
	// An A resource record. Data is an IPv4 address.
	ResourceRecord_A ResourceRecord_RecordType = 1
	// An AAAA resource record. Data is an IPv6 address.
	ResourceRecord_AAAA ResourceRecord_RecordType = 2
	// A CNAME resource record. Data is a domain name to be aliased.
	ResourceRecord_CNAME ResourceRecord_RecordType = 3
)

// Enum value maps for ResourceRecord_RecordType.
var (
	ResourceRecord_RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "A",
		2: "AAAA",
		3: "CNAME",
	}
	ResourceRecord_RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED": 0,
		"A":                       1,
		"AAAA":                    2,
		"CNAME":                   3,
	}
)

func (x ResourceRecord_RecordType) Enum() *ResourceRecord_RecordType {
	p := new(ResourceRecord_RecordType)
	*p = x
	return p
}

func (x ResourceRecord_RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceRecord_RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_run_v1_domain_mappings_proto_enumTypes[1].Descriptor()
}

func (ResourceRecord_RecordType) Type() protoreflect.EnumType {
	return &file_google_cloud_run_v1_domain_mappings_proto_enumTypes[1]
}

func (x ResourceRecord_RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceRecord_RecordType.Descriptor instead.
func (ResourceRecord_RecordType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{8, 0}
}

type CreateDomainMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace in which the domain mapping should be created. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
	// Authorization requires the following IAM permission on the specified resource parent:
	// run.services.create
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The domain mapping instance to create.
	DomainMapping *DomainMapping `protobuf:"bytes,2,opt,name=domain_mapping,json=domainMapping,proto3" json:"domain_mapping,omitempty"`
	// Indicates that the server should validate the request and populate default values without persisting the request.
	// Supported values: all
	DryRun string `protobuf:"bytes,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateDomainMappingRequest) Reset() {
	*x = CreateDomainMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainMappingRequest) ProtoMessage() {}

func (x *CreateDomainMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateDomainMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDomainMappingRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDomainMappingRequest) GetDomainMapping() *DomainMapping {
	if x != nil {
		return x.DomainMapping
	}
	return nil
}

func (x *CreateDomainMappingRequest) GetDryRun() string {
	if x != nil {
		return x.DryRun
	}
	return ""
}

type DeleteDomainMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the domain mapping to delete. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
	// Authorization requires the following IAM permission on the specified resource name:
	// run.services.delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background.
	// Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
	PropagationPolicy string `protobuf:"bytes,2,opt,name=propagation_policy,json=propagationPolicy,proto3" json:"propagation_policy,omitempty"`
	// Cloud Run currently ignores this parameter.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// Cloud Run currently ignores this parameter.
	ApiVersion string `protobuf:"bytes,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Indicates that the server should validate the request and populate default values without persisting the request.
	// Supported values: all
	DryRun string `protobuf:"bytes,5,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *DeleteDomainMappingRequest) Reset() {
	*x = DeleteDomainMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainMappingRequest) ProtoMessage() {}

func (x *DeleteDomainMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteDomainMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteDomainMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDomainMappingRequest) GetPropagationPolicy() string {
	if x != nil {
		return x.PropagationPolicy
	}
	return ""
}

func (x *DeleteDomainMappingRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DeleteDomainMappingRequest) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *DeleteDomainMappingRequest) GetDryRun() string {
	if x != nil {
		return x.DryRun
	}
	return ""
}

type GetDomainMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the domain mapping to retrieve. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
	// Authorization requires the following IAM permission on the specified resource name:
	// run.services.get
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDomainMappingRequest) Reset() {
	*x = GetDomainMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainMappingRequest) ProtoMessage() {}

func (x *GetDomainMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainMappingRequest.ProtoReflect.Descriptor instead.
func (*GetDomainMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{2}
}

func (x *GetDomainMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDomainMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace from which the domain mappings should be listed. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
	// Authorization requires the following IAM permission on the specified resource parent:
	// run.services.list
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of records that should be returned.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not currently used by Cloud Run.
	IncludeUninitialized bool `protobuf:"varint,3,opt,name=include_uninitialized,json=includeUninitialized,proto3" json:"include_uninitialized,omitempty"`
	// Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
	// Not currently used by Cloud Run.
	FieldSelector string `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3" json:"field_selector,omitempty"`
	// Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
	LabelSelector string `protobuf:"bytes,5,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
	ResourceVersion string `protobuf:"bytes,6,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
	Watch bool `protobuf:"varint,7,opt,name=watch,proto3" json:"watch,omitempty"`
	// Optional encoded string to continue paging.
	PageToken string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDomainMappingsRequest) Reset() {
	*x = ListDomainMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainMappingsRequest) ProtoMessage() {}

func (x *ListDomainMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListDomainMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{3}
}

func (x *ListDomainMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDomainMappingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDomainMappingsRequest) GetIncludeUninitialized() bool {
	if x != nil {
		return x.IncludeUninitialized
	}
	return false
}

func (x *ListDomainMappingsRequest) GetFieldSelector() string {
	if x != nil {
		return x.FieldSelector
	}
	return ""
}

func (x *ListDomainMappingsRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ListDomainMappingsRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ListDomainMappingsRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListDomainMappingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDomainMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API version for this call such as  "domains.cloudrun.com/v1".
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// The kind of this resource, in this case "DomainMappingList".
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata associated with this DomainMapping list.
	Metadata *v1.ObjectMeta `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of DomainMappings.
	Items []*DomainMapping `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,5,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListDomainMappingsResponse) Reset() {
	*x = ListDomainMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainMappingsResponse) ProtoMessage() {}

func (x *ListDomainMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListDomainMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{4}
}

func (x *ListDomainMappingsResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ListDomainMappingsResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListDomainMappingsResponse) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ListDomainMappingsResponse) GetItems() []*DomainMapping {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListDomainMappingsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

type DomainMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API version for this call such as  "domains.cloudrun.com/v1".
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// The kind of this resource, in this case "DomainMapping".
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata associated with this DomainMapping.
	Metadata *v1.ObjectMeta `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The spec for this DomainMapping.
	Spec *DomainMappingSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// The current status of the DomainMapping.
	Status *DomainMappingStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DomainMapping) Reset() {
	*x = DomainMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMapping) ProtoMessage() {}

func (x *DomainMapping) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMapping.ProtoReflect.Descriptor instead.
func (*DomainMapping) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{5}
}

func (x *DomainMapping) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *DomainMapping) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DomainMapping) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DomainMapping) GetSpec() *DomainMappingSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DomainMapping) GetStatus() *DomainMappingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DomainMappingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Knative Route that this DomainMapping applies to. The route must exist.
	RouteName string `protobuf:"bytes,1,opt,name=route_name,json=routeName,proto3" json:"route_name,omitempty"`
	// If set, the mapping will override any mapping set before this spec was set.
	// It is recommended that the user leaves this empty to receive an error warning about a potential conflict
	// and only set it once the respective UI has given such a warning.
	ForceOverride bool `protobuf:"varint,3,opt,name=force_override,json=forceOverride,proto3" json:"force_override,omitempty"`
}

func (x *DomainMappingSpec) Reset() {
	*x = DomainMappingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMappingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMappingSpec) ProtoMessage() {}

func (x *DomainMappingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMappingSpec.ProtoReflect.Descriptor instead.
func (*DomainMappingSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{6}
}

func (x *DomainMappingSpec) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *DomainMappingSpec) GetForceOverride() bool {
	if x != nil {
		return x.ForceOverride
	}
	return false
}

type DomainMappingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller.
	// Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation
	// and the Ready condition's status is True or False.
	ObservedGeneration int32 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The resource records required to configure this domain mapping.
	// These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
	ResourceRecords []*ResourceRecord `protobuf:"bytes,3,rep,name=resource_records,json=resourceRecords,proto3" json:"resource_records,omitempty"`
	// The name of the route that the mapping currently points to.
	MappedRouteName string `protobuf:"bytes,4,opt,name=mapped_route_name,json=mappedRouteName,proto3" json:"mapped_route_name,omitempty"`
	// Cloud Run fully managed: not supported
	// Cloud Run on GKE: supported
	// Holds the URL that will serve the traffic of the DomainMapping.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DomainMappingStatus) Reset() {
	*x = DomainMappingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMappingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMappingStatus) ProtoMessage() {}

func (x *DomainMappingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMappingStatus.ProtoReflect.Descriptor instead.
func (*DomainMappingStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{7}
}

func (x *DomainMappingStatus) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *DomainMappingStatus) GetObservedGeneration() int32 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *DomainMappingStatus) GetResourceRecords() []*ResourceRecord {
	if x != nil {
		return x.ResourceRecords
	}
	return nil
}

func (x *DomainMappingStatus) GetMappedRouteName() string {
	if x != nil {
		return x.MappedRouteName
	}
	return ""
}

func (x *DomainMappingStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ResourceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata string `protobuf:"bytes,2,opt,name=rrdata,proto3" json:"rrdata,omitempty"`
}

func (x *ResourceRecord) Reset() {
	*x = ResourceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecord) ProtoMessage() {}

func (x *ResourceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_run_v1_domain_mappings_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecord.ProtoReflect.Descriptor instead.
func (*ResourceRecord) Descriptor() ([]byte, []int) {
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceRecord) GetRrdata() string {
	if x != nil {
		return x.Rrdata
	}
	return ""
}

var File_google_cloud_run_v1_domain_mappings_proto protoreflect.FileDescriptor

var file_google_cloud_run_v1_domain_mappings_proto_rawDesc = []byte{
	0x0a, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72,
	0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72,
	0x75, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0xad, 0x01, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x2d, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x90, 0x02, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x4c,
	0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x22, 0x94, 0x02, 0x0a,
	0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x41, 0x41, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x32, 0x9f, 0x04, 0x0a, 0x0e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x1a, 0x46, 0xca, 0x41, 0x12, 0x72, 0x75, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x76,
	0x31, 0x3b, 0x72, 0x75, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_run_v1_domain_mappings_proto_rawDescOnce sync.Once
	file_google_cloud_run_v1_domain_mappings_proto_rawDescData = file_google_cloud_run_v1_domain_mappings_proto_rawDesc
)

func file_google_cloud_run_v1_domain_mappings_proto_rawDescGZIP() []byte {
	file_google_cloud_run_v1_domain_mappings_proto_rawDescOnce.Do(func() {
		file_google_cloud_run_v1_domain_mappings_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_run_v1_domain_mappings_proto_rawDescData)
	})
	return file_google_cloud_run_v1_domain_mappings_proto_rawDescData
}

var file_google_cloud_run_v1_domain_mappings_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_run_v1_domain_mappings_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_run_v1_domain_mappings_proto_goTypes = []interface{}{
	(DomainMappingSpec_CertificateMode)(0), // 0: google.cloud.run.v1.DomainMappingSpec.CertificateMode
	(ResourceRecord_RecordType)(0),         // 1: google.cloud.run.v1.ResourceRecord.RecordType
	(*CreateDomainMappingRequest)(nil),     // 2: google.cloud.run.v1.CreateDomainMappingRequest
	(*DeleteDomainMappingRequest)(nil),     // 3: google.cloud.run.v1.DeleteDomainMappingRequest
	(*GetDomainMappingRequest)(nil),        // 4: google.cloud.run.v1.GetDomainMappingRequest
	(*ListDomainMappingsRequest)(nil),      // 5: google.cloud.run.v1.ListDomainMappingsRequest
	(*ListDomainMappingsResponse)(nil),     // 6: google.cloud.run.v1.ListDomainMappingsResponse
	(*DomainMapping)(nil),                  // 7: google.cloud.run.v1.DomainMapping
	(*DomainMappingSpec)(nil),              // 8: google.cloud.run.v1.DomainMappingSpec
	(*DomainMappingStatus)(nil),            // 9: google.cloud.run.v1.DomainMappingStatus
	(*ResourceRecord)(nil),                 // 10: google.cloud.run.v1.ResourceRecord
	(*v1.ObjectMeta)(nil),                  // 11: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*Condition)(nil),                      // 12: google.cloud.run.v1.Condition
	(*v1.Status)(nil),                      // 13: k8s.io.apimachinery.pkg.apis.meta.v1.Status
}
var file_google_cloud_run_v1_domain_mappings_proto_depIdxs = []int32{
	7,  // 0: google.cloud.run.v1.CreateDomainMappingRequest.domain_mapping:type_name -> google.cloud.run.v1.DomainMapping
	11, // 1: google.cloud.run.v1.ListDomainMappingsResponse.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	7,  // 2: google.cloud.run.v1.ListDomainMappingsResponse.items:type_name -> google.cloud.run.v1.DomainMapping
	11, // 3: google.cloud.run.v1.DomainMapping.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	8,  // 4: google.cloud.run.v1.DomainMapping.spec:type_name -> google.cloud.run.v1.DomainMappingSpec
	9,  // 5: google.cloud.run.v1.DomainMapping.status:type_name -> google.cloud.run.v1.DomainMappingStatus
	12, // 6: google.cloud.run.v1.DomainMappingStatus.conditions:type_name -> google.cloud.run.v1.Condition
	10, // 7: google.cloud.run.v1.DomainMappingStatus.resource_records:type_name -> google.cloud.run.v1.ResourceRecord
	2,  // 8: google.cloud.run.v1.DomainMappings.CreateDomainMapping:input_type -> google.cloud.run.v1.CreateDomainMappingRequest
	3,  // 9: google.cloud.run.v1.DomainMappings.DeleteDomainMapping:input_type -> google.cloud.run.v1.DeleteDomainMappingRequest
	4,  // 10: google.cloud.run.v1.DomainMappings.GetDomainMapping:input_type -> google.cloud.run.v1.GetDomainMappingRequest
	5,  // 11: google.cloud.run.v1.DomainMappings.ListDomainMappings:input_type -> google.cloud.run.v1.ListDomainMappingsRequest
	7,  // 12: google.cloud.run.v1.DomainMappings.CreateDomainMapping:output_type -> google.cloud.run.v1.DomainMapping
	13, // 13: google.cloud.run.v1.DomainMappings.DeleteDomainMapping:output_type -> k8s.io.apimachinery.pkg.apis.meta.v1.Status
	7,  // 14: google.cloud.run.v1.DomainMappings.GetDomainMapping:output_type -> google.cloud.run.v1.DomainMapping
	6,  // 15: google.cloud.run.v1.DomainMappings.ListDomainMappings:output_type -> google.cloud.run.v1.ListDomainMappingsResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_google_cloud_run_v1_domain_mappings_proto_init() }
func file_google_cloud_run_v1_domain_mappings_proto_init() {
	if File_google_cloud_run_v1_domain_mappings_proto != nil {
		return
	}
	file_google_cloud_run_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMappingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMappingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_run_v1_domain_mappings_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_run_v1_domain_mappings_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_run_v1_domain_mappings_proto_goTypes,
		DependencyIndexes: file_google_cloud_run_v1_domain_mappings_proto_depIdxs,
		EnumInfos:         file_google_cloud_run_v1_domain_mappings_proto_enumTypes,
		MessageInfos:      file_google_cloud_run_v1_domain_mappings_proto_msgTypes,
	}.Build()
	File_google_cloud_run_v1_domain_mappings_proto = out.File
	file_google_cloud_run_v1_domain_mappings_proto_rawDesc = nil
	file_google_cloud_run_v1_domain_mappings_proto_goTypes = nil
	file_google_cloud_run_v1_domain_mappings_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DomainMappingsClient is the client API for DomainMappings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainMappingsClient interface {
	// Create a new domain mapping.
	CreateDomainMapping(ctx context.Context, in *CreateDomainMappingRequest, opts ...grpc.CallOption) (*DomainMapping, error)
	// Delete a domain mapping.
	DeleteDomainMapping(ctx context.Context, in *DeleteDomainMappingRequest, opts ...grpc.CallOption) (*v1.Status, error)
	// Get information about a domain mapping.
	GetDomainMapping(ctx context.Context, in *GetDomainMappingRequest, opts ...grpc.CallOption) (*DomainMapping, error)
	// List domain mappings.
	ListDomainMappings(ctx context.Context, in *ListDomainMappingsRequest, opts ...grpc.CallOption) (*ListDomainMappingsResponse, error)
}

type domainMappingsClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainMappingsClient(cc grpc.ClientConnInterface) DomainMappingsClient {
	return &domainMappingsClient{cc}
}

func (c *domainMappingsClient) CreateDomainMapping(ctx context.Context, in *CreateDomainMappingRequest, opts ...grpc.CallOption) (*DomainMapping, error) {
	out := new(DomainMapping)
	err := c.cc.Invoke(ctx, "/google.cloud.run.v1.DomainMappings/CreateDomainMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMappingsClient) DeleteDomainMapping(ctx context.Context, in *DeleteDomainMappingRequest, opts ...grpc.CallOption) (*v1.Status, error) {
	out := new(v1.Status)
	err := c.cc.Invoke(ctx, "/google.cloud.run.v1.DomainMappings/DeleteDomainMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMappingsClient) GetDomainMapping(ctx context.Context, in *GetDomainMappingRequest, opts ...grpc.CallOption) (*DomainMapping, error) {
	out := new(DomainMapping)
	err := c.cc.Invoke(ctx, "/google.cloud.run.v1.DomainMappings/GetDomainMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMappingsClient) ListDomainMappings(ctx context.Context, in *ListDomainMappingsRequest, opts ...grpc.CallOption) (*ListDomainMappingsResponse, error) {
	out := new(ListDomainMappingsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.run.v1.DomainMappings/ListDomainMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainMappingsServer is the server API for DomainMappings service.
type DomainMappingsServer interface {
	// Create a new domain mapping.
	CreateDomainMapping(context.Context, *CreateDomainMappingRequest) (*DomainMapping, error)
	// Delete a domain mapping.
	DeleteDomainMapping(context.Context, *DeleteDomainMappingRequest) (*v1.Status, error)
	// Get information about a domain mapping.
	GetDomainMapping(context.Context, *GetDomainMappingRequest) (*DomainMapping, error)
	// List domain mappings.
	ListDomainMappings(context.Context, *ListDomainMappingsRequest) (*ListDomainMappingsResponse, error)
}

// UnimplementedDomainMappingsServer can be embedded to have forward compatible implementations.
type UnimplementedDomainMappingsServer struct {
}

func (*UnimplementedDomainMappingsServer) CreateDomainMapping(context.Context, *CreateDomainMappingRequest) (*DomainMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainMapping not implemented")
}
func (*UnimplementedDomainMappingsServer) DeleteDomainMapping(context.Context, *DeleteDomainMappingRequest) (*v1.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainMapping not implemented")
}
func (*UnimplementedDomainMappingsServer) GetDomainMapping(context.Context, *GetDomainMappingRequest) (*DomainMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainMapping not implemented")
}
func (*UnimplementedDomainMappingsServer) ListDomainMappings(context.Context, *ListDomainMappingsRequest) (*ListDomainMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainMappings not implemented")
}

func RegisterDomainMappingsServer(s *grpc.Server, srv DomainMappingsServer) {
	s.RegisterService(&_DomainMappings_serviceDesc, srv)
}

func _DomainMappings_CreateDomainMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMappingsServer).CreateDomainMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.run.v1.DomainMappings/CreateDomainMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMappingsServer).CreateDomainMapping(ctx, req.(*CreateDomainMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMappings_DeleteDomainMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMappingsServer).DeleteDomainMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.run.v1.DomainMappings/DeleteDomainMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMappingsServer).DeleteDomainMapping(ctx, req.(*DeleteDomainMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMappings_GetDomainMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMappingsServer).GetDomainMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.run.v1.DomainMappings/GetDomainMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMappingsServer).GetDomainMapping(ctx, req.(*GetDomainMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMappings_ListDomainMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMappingsServer).ListDomainMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.run.v1.DomainMappings/ListDomainMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMappingsServer).ListDomainMappings(ctx, req.(*ListDomainMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainMappings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.run.v1.DomainMappings",
	HandlerType: (*DomainMappingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomainMapping",
			Handler:    _DomainMappings_CreateDomainMapping_Handler,
		},
		{
			MethodName: "DeleteDomainMapping",
			Handler:    _DomainMappings_DeleteDomainMapping_Handler,
		},
		{
			MethodName: "GetDomainMapping",
			Handler:    _DomainMappings_GetDomainMapping_Handler,
		},
		{
			MethodName: "ListDomainMappings",
			Handler:    _DomainMappings_ListDomainMappings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/run/v1/domain_mappings.proto",
}
